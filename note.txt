TUTORIAL: https://www.youtube.com/watch?v=BGTx91t8q50

//Using vscode

To run a java file, run "javac file_name.java" first to compile the code, then run "java class_name"
### or java file_name.java (not recommended though!)

Two types of data types:
* primitive
*

primitive: integer, float, boolean, character

integer: byte, short, int, long
float: double, float
char or character
boolean: true, false

int: 4 bytes
long: 8 bytes (e.g long num = 4l;)
short: 2 bytes
byte: 1 byte (-2^7 to 2^7-1) or (-128 to 127)

float: 4 bytes (e.g float num = 4.8f;)
double (default): 8 bytes (e.g double num = 4.8;)

char: 2 bytes

TYPE CONVERSION AND CASTING
conversion: when you implicitly convert the value of a type into the format of another type. 
e.g. storing a byte value into an integer variable so the byte value becomes an integer.

casting: when you explicitly convert the value of a type into the format of another type. 
e.g. converting a type int into a type byte

byte b = 127;
int i = 50;

e.g. of converting a type:
i = b;

e.g. of casting a type:
b = (byte)i;


When trying to convert an integer value (especially a large integer value) to a byte, 
it will convert it to a modulus (divide the number by a range e.g.
converting int i = 257 to byte which can contain 127 will result in: 257% 256 which is 1
Therefore, byte b = (byte)i is equal to 1)

i.e int i = 257;
byte b = (byte)i; // result is 1 because modulus 257%256 = 1 or 257 - 256 = 1

int i = 128;
byte b = (byte)i; // result is -128 because 128 - 256 = -128

int i = 129;
byte b = (byte)i; // result is -127 because 129 - 256 = -127

TYPE REMOTION
When performing operations on data, the resulting value may go out of range for a type.
e.g. The result of multiplying byte b 40 and byte y 40 is 1600.
It is possible to store the result into an integer variable.


LOGICAL OPERATORS
&& - AND
|| - OR
! - NOT


CONDITIONAL STATEMENT
If you have only one statement under the "if" statement, then you don't need a curly bracket.
If you have more than one statement under the "if" statement (especially in an if-else block),
then you need to put the statements in a curly bracket.
e.g. 
if (a == b){
    System.out.println("Yeah Yeah");
    System.out.println("Yeah Yeah again");
}
else
System.out.println("Blah Blah Blah")

#See else has no curly bracket but if has a curly bracket.

SWITCH
Instead of using if, else if, else if, else if, else; we can use "switch" statement.
e.g if grade >= 70
System.out.println("A")
else if grade >= 60
System.out.println("B")
blah blah
else
System.out.println("F")

we can use "switch" statement here by using "cases" Instead of "if" and "else if"
e.g switch(grade){
    case 1:
    System.out.println("blah blah")
}


do-while loop is used to get the output at least once even if the condition is false.

In while loop, the expression, condition, and increment are usually written in different lines. In for loop, the expression, condition, and increment can all be written in the same line.

In terms of frequency of use, "FOR-loop" is better. In terms of database, files, network, "WHILE-loop" is better.